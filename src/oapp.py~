#!/usr/bin/env python3
from flask import Flask, render_template, request
import json
import csv
import numpy as np
import matplotlib.pyplot as plt
import geopandas
import contextily as cx

app = Flask(__name__)
eq_data = {'all_month':[]}


@app.route('/help', methods=['GET'])
def help() -> str:
    '''
    Information on how to interact with the application
    Returns: A string describing what paths to use for each function.
    '''
    return '''\nFIRST LOAD DATA USING THE FOLLOWING PATH: /load -X POST\n
    IF THERE ARE ERROR LOAD THE DATA ONCE MORE\n\n
    Navigation:\n
    Use the following routes to access the data:
      1.  /csv/ft/<feat_string>
          #posts data for a specific column in the csv
      2.  /csv/eq/<id_num>
          #posts data from all columns for one earthquake 
      3.  /countries
          #lists all countries
      4.  /csv/mag/<mag>
          #all the earthquakes for a given magnitude \n\n'''

@app.route('/plot', methods=['GET'])
def plot():
    # Data for plotting
    t = np.arange(0.0, 2.0, 0.01)
    s = 1 + np.sin(2 * np.pi * t)
    
    fig, ax = plt.subplots()
    ax.plot(t, s)
    
    ax.set(xlabel='time (s)', ylabel='voltage (mV)',
           title='About as simple as it gets, folks')
    ax.grid()
    
    fig.savefig("templates/test.png")
    return render_template("index.html")

@app.route('/map', methods=['GET'])
def map():
    df = geopandas.read_file(geopandas.datasets.get_path('nybb'))
    df_wm = df.to_crs(epsg=3857)
    ax = df_wm.plot(figsize=(10, 10), alpha=0.5, edgecolor='k')
    cx.add_basemap(ax)
    plt.savefig('map.png')
    return 'map saved\n\n'

@app.route('/geo', methods=['GET'])
def geo():
    
    return 'map saved\n\n'


@app.route('/load', methods=['POST'])
def download_data():
    '''
    loads the data to dictionary of list of dict (easier to work w flask than list)
    returns json-formatted
    '''
    global eq_data
    with open('all_month.csv', 'r') as f:
        reader = csv.DictReader(f)
        for row in reader:
            eq_data['all_month'].append(dict(row))
    return 'Data has been loaded.\n'

@app.route('/csv/ft/<feat_string>', methods=['GET'])
def specific_feature(feat_string: str):
    '''
    prints a given feature for all earthquakes
    we probably should make these return lists/strings/dicts in the future
    '''
    string_list = []
    for x in eq_data['all_month']:
        string_list.append('[ID ' + x['id'] + f']: ' + x[feat_string])
    return(f'All Earthquake {feat_string}s\n' + json.dumps(string_list, indent = 1)+ '\n')

@app.route('/csv/eq/<id_num>', methods=['GET'])
def specific_earthquake(id_num: str):
    '''
    prints all info abt a specific earthquake given # index
    really we should do one by ID maybe?
    '''
    for x in eq_data['all_month']:
        if x['id'] == id_num:
            return(f'Earthquake {id_num}\n' + json.dumps(x, indent = 1) + '\n')

@app.route('/csv/mag/<mag>', methods=['GET'])
def big_earthquake(mag: int):
    '''
    prints earthquakes above some given magnitude
    '''
    magnitude_list = []
    for x in eq_data['all_month']:
        if float(x['mag']) >= int(mag):
            magnitude_list.append('[ID ' + x['id'] + ']: ' + x['mag'])
    return(f'Magnitudes above {mag}\n' + json.dumps(magnitude_list, indent = 1) + '\n')

if __name__ == '__main__':
    app.run(debug=True, host = '0.0.0.0')
